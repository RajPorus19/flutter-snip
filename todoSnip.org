* TODO flutter-snip [37/43] [86%]
** DONE Stateless Widget
    Creates a Stateless widget
** DONE Stateful Widget
    Creates a Stateful widget
** DONE Build Method
    Describes the part of the user interface represented by the widget.
** DONE InitState
    Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates.
** DONE Dispose
    Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again.
** DONE Reassemble
    Called whenever the application is reassembled during debugging, for example during hot reload.
** DONE didChangeDependencies
    Called when a dependency of this State object changes
** DONE didUpdateWidget
    Called whenever the widget configuration changes.
** DONE Custom Clipper
    Used for creating custom shapes
** DONE Custom Painter
    Used for creating custom paint
** DONE ListView.Builder
    Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null itemCount improves the ability of the ListView to estimate the maximum scroll extent.
** DONE ListView.Separated
    Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'.
** DONE Custom ScrollView
    Creates a ScrollView that creates custom scroll effects using slivers. If the primary argument is true, the controller must be null.
** DONE Stream Builder
    Creates a new StreamBuilder that builds itself based on the latest snapshot of interaction with the specified stream
** DONE Animated Builder
    Creates an Animated Builder. The widget specified to child is passed to the builder
** DONE Stateful Builder
    Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree.
** DONE Orientation Builder
    Creates a builder which allows for the orientation of the device to be specified and referenced
** DONE Layout Builder
    Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints.
** DONE Single Child Scroll View
    Creates a scroll view with a single child
** DONE Future Builder
    Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future.
** DONE No Such Method
    This method is invoked when a non-existent method or property is accessed.
** DONE Inherited Widget
    Class used to propagate information down the widget tree.
** DONE Mounted
    Whether this State object is currently in a tree.
** DONE Sink
    A Sink is the input of a stream.
** DONE Stream
    A source of asynchronous data events. A stream can be of any data type.
** DONE Subject
    A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream.
** DONE To String
    Returns a string representation of this object.
** DONE Debug Print
    Prints a message to the console, which you can access using the flutter tool's logs command (flutter logs).
** DONE Material Package
    Import Material package.
** DONE Cupertino Package
    Import Cupertino package.
** DONE flutter_test Package
    Import flutter_test package.
** DONE Material App
    Create a new Material App.
** DONE Cupertino App
    Create a New Cupertino App.
** DONE Tween Animation Builder
    Widget builder that animates a property of a Widget to a target value whenever the target value changes.
** DONE Value Listenable Builder
    Given a ValueListenable and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes.
** DONE Test
    Create a test function.
** DONE Test Widgets
    Create a testWidgets function.
** WAIT One function to call all the other ones and find their prefix
    Here you'll have to make a function "handler"
    that will call any other function the user wants with the prefix he would have typed
    for the snippet
** HOLD Test ALL THE SNIPPETS [0/37] [0%]
    Test them all before you push it to github
    add the tab and remove some, it'll go fast.
*** TODO STL()
*** TODO STF()
*** TODO Build()
*** TODO Paint()
*** TODO Clipper()
*** TODO Init()
*** TODO Dispose()
*** TODO Reassemble()
*** TODO DidChangeDependencies()
*** TODO DidUpdateWidget()
*** TODO ListViewBuilder()
*** TODO ListViewSeparated()
*** TODO ScrollView()
*** TODO StreamBuilder()
*** TODO AnimBuilder()
*** TODO STFBuilder()
*** TODO OrientationBuilder()
*** TODO LayoutBuilder()
*** TODO SingleChildScroll()
*** TODO FutureBuilder()
*** TODO NoSuchMethod()
*** TODO InheritedWidget()
*** TODO Mounted()
*** TODO Sink()
*** TODO Stream()
*** TODO Subject()
*** TODO ToStr()
*** TODO DebugPrint()
*** TODO MaterialPackage()
*** TODO CupertinoPackage()
*** TODO FlutterTestPackage()
*** TODO MaterialApp()
*** TODO CupertinoApp()
*** TODO TweenAnimBuilder()
*** TODO ValueListenBuilder()
*** TODO function Ftest()
*** TODO function TestWidget()

** TODO Push it to Github
    Yes, do it, it's good enough ask for question on vim servers about your plugin
    it's super for a first plugin, with all the feedback fix it, and use it to make your app.
** TODO Wrap widget with another widget
    Let's you wrap a widget with another one
** TODO Delete a widget
    Delete a widget and all it's childs
** TODO Flutter reload on save
    Maybe a send signal to flutter ? :/



* Flutter ressources
** Flutter snippets list
*** https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets
** Flutter snippet file
*** https://raw.githubusercontent.com/Nash0x7E2/awesome-flutter-snippets/master/snippets/snippets.json
* Vim plugin cheatsheet
** https://devhints.io/vimscript
* Vim plugin the hard way
** https://learnvimscriptthehardway.stevelosh.com/
